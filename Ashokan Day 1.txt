def select(n: int) -> bool:
    return n % 3 == 0 or n % 5 == 0

 def euler001_A(limit: int) -> int:
    n, total = 1, 0
    while n < limit:
        if select(n):
            total += n
        n += 1
    return total

def euler001_B(limit: int) -> int:
    total = 0
    for n in range(1, limit):
        if select(n):
            total += n
    return total

def euler001_C(limit: int) -> int:
    return sum(range(3, limit, 3)) +\
           sum(range(5, limit, 5)) -\
           sum(range(15, limit, 15))



Functional programming

def alpha(n):
    r = 0
    while r * r * r < n:
        r += 1
    return r * r * r == n

def is_perfect_cube(n: int) -> bool:
    r = 0
    while r * r * r < n:
        r += 1
    return r * r * r == n

def is_perfect_square(n: int) -> bool:
    r = 0
    while r * r < n:
        r += 1
    return r * r == n

def is_triangular(n: int) -> bool:
    r = 0
    while (r * (r + 1)) // 2 < n:
        r += 1
    return (r * (r + 1)) // 2 == n

def is_powerof2(n: int) -> bool:
    r = 0
    while 2 ** r < n:
        r += 1
    return 2 ** r == n

a>b⟹f(a)>f(b) 


def _is(f, n: int) -> bool:
    r = 0
    while f(r) < n:
        r += 1
    return f(r) == n

def square(n: int) -> int:
    return n * n

_is(square, 16)

_is(square, 18)

def p2(n: int) -> int:
    return 2 ** n

_is(p2, 32)

x = p2

x(5)

fs = [is_square, is_cube]


map
map(f,  L )  ≡  [f( L [0]), f( L [1])...]
S′={f(x)|x∈S}≡map(f,S)

msq = map(square, [1, 6, -3])
print(msq)
print(list(msq))

filter
S′={x|x∈S,g(x)}≡filter(g,S)

filter(select, [1, 3, 6, 10, 2])
print(list(filter(select, [1, 3, 6, 10, 2])))



List comprehension
S′={f(x)|x∈S,g(x)}≡map(f,filter(g,S)) 
[f(x) for x in S if g(x)]
Filter in terms of List comprehension
[x  for  x  in  S  if  g(x)]≡filter(g,S) 
map in terms of list comprehension
[f(x)  for  x  in  S]≡map(f,S)

def euler001_E(limit: int) -> int:
    return sum([n for n in range(1, limit) if select(n)])


def euler001_F(limit: int) -> int:
    return sum(filter(select, range(1, limit)))
